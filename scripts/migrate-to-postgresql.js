#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client')
const fs = require('fs')
const path = require('path')

console.log('üöÄ Migration vers PostgreSQL - ChantierPro')
console.log('===============================================')

async function migrateToPostgreSQL() {
  console.log('üìä 1. V√©rification de la base SQLite existante...')
  
  const sqliteDbPath = path.join(__dirname, '..', 'prisma', 'dev.db')
  
  if (!fs.existsSync(sqliteDbPath)) {
    console.log('‚ùå Aucune base SQLite trouv√©e √† migrer.')
    console.log('‚úÖ Vous pouvez proc√©der directement √† la configuration PostgreSQL.')
    return
  }
  
  console.log('‚úÖ Base SQLite trouv√©e!')
  
  console.log('üìã 2. Instructions pour la migration:')
  console.log('')
  console.log('√âTAPE 1 - Installer PostgreSQL:')
  console.log('macOS: brew install postgresql')
  console.log('Ubuntu: sudo apt install postgresql postgresql-contrib')
  console.log('Windows: https://www.postgresql.org/download/windows/')
  console.log('')
  console.log('√âTAPE 2 - Cr√©er la base de donn√©es:')
  console.log('sudo -u postgres psql')
  console.log('CREATE DATABASE chantierpro;')
  console.log('CREATE USER chantierpro_user WITH ENCRYPTED PASSWORD \'your_password\';')
  console.log('GRANT ALL PRIVILEGES ON DATABASE chantierpro TO chantierpro_user;')
  console.log('\\q')
  console.log('')
  console.log('√âTAPE 3 - Configurer l\'URL de base de donn√©es:')
  console.log('Dans votre fichier .env, remplacez:')
  console.log('DATABASE_URL="sqlite:./prisma/dev.db"')
  console.log('par:')
  console.log('DATABASE_URL="postgresql://chantierpro_user:your_password@localhost:5432/chantierpro"')
  console.log('')
  console.log('√âTAPE 4 - Migrer le sch√©ma:')
  console.log('npx prisma migrate dev --name init-postgresql')
  console.log('')
  console.log('√âTAPE 5 - G√©n√©rer le client Prisma:')
  console.log('npx prisma generate')
  console.log('')
  console.log('√âTAPE 6 - (Optionnel) Migrer les donn√©es existantes:')
  console.log('Pour conserver vos donn√©es, utilisez un outil comme:')
  console.log('- pgloader pour la migration automatique')
  console.log('- Export/Import manuel via Prisma Studio')
  console.log('')
  console.log('üéØ AVANTAGES PostgreSQL:')
  console.log('‚úÖ Meilleure performance sur de gros volumes')
  console.log('‚úÖ Support des transactions complexes')
  console.log('‚úÖ Requ√™tes parall√®les optimis√©es')
  console.log('‚úÖ Backup et r√©plication int√©gr√©s')
  console.log('‚úÖ Extensions GIS pour g√©olocalisation')
  console.log('‚úÖ Compatible avec tous les h√©bergeurs cloud')
  console.log('')
  
  console.log('üîß Configuration recommand√©e pour la production:')
  console.log('üìù postgresql.conf:')
  console.log('shared_buffers = 256MB')
  console.log('effective_cache_size = 1GB')
  console.log('work_mem = 4MB')
  console.log('maintenance_work_mem = 64MB')
  console.log('checkpoint_completion_target = 0.9')
  console.log('wal_buffers = 16MB')
  console.log('max_connections = 100')
  console.log('')
  
  console.log('üìä Cr√©ation d\'un script de backup automatique...')
  createBackupScript()
  
  console.log('‚úÖ Migration pr√©par√©e! Suivez les √©tapes ci-dessus.')
}

function createBackupScript() {
  const backupScript = `#!/bin/bash

# Script de backup automatique PostgreSQL - ChantierPro
# Usage: ./backup-db.sh

DB_NAME="chantierpro"
DB_USER="chantierpro_user"
BACKUP_DIR="./backups"
DATE=$(date +"%Y%m%d_%H%M%S")

# Cr√©er le dossier de backup s'il n'existe pas
mkdir -p $BACKUP_DIR

# Cr√©er le backup
pg_dump -U $DB_USER -h localhost $DB_NAME > $BACKUP_DIR/chantierpro_backup_$DATE.sql

# Garder seulement les 7 derniers backups
find $BACKUP_DIR -name "chantierpro_backup_*.sql" -type f -mtime +7 -delete

echo "‚úÖ Backup cr√©√©: $BACKUP_DIR/chantierpro_backup_$DATE.sql"
`
  
  fs.writeFileSync(path.join(__dirname, '..', 'backup-db.sh'), backupScript)
  
  // Rendre le script ex√©cutable
  const { execSync } = require('child_process')
  try {
    execSync('chmod +x backup-db.sh', { cwd: path.join(__dirname, '..') })
    console.log('‚úÖ Script de backup cr√©√©: backup-db.sh')
  } catch (error) {
    console.log('‚ö†Ô∏è Script de backup cr√©√© mais non ex√©cutable')
  }
}

migrateToPostgreSQL().catch(console.error)
`