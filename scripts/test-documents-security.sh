#!/bin/bash

echo "üîí TEST DE S√âCURIT√â API DOCUMENTS"
echo "=================================="
echo ""
echo "Ce script teste le filtrage par r√¥le de l'API GET /api/documents"
echo ""

# Variables
APP_URL="http://localhost:3000"
COOKIE_JAR="documents_security_cookies.txt"

# Nettoyer les anciens cookies
rm -f $COOKIE_JAR

# Fonction pour tester l'API avec un r√¥le sp√©cifique
test_documents_api() {
    local role="$1"
    local email="$2"
    local password="$3"
    local expected_count="$4"
    
    echo "üß™ Test avec le r√¥le: $role"
    
    # Connexion
    LOGIN_RESPONSE=$(curl -s -X POST \
        -c $COOKIE_JAR \
        -b $COOKIE_JAR \
        -H "Content-Type: application/json" \
        -d "{\"email\": \"$email\", \"password\": \"$password\"}" \
        "$APP_URL/api/auth/login")
    
    if echo "$LOGIN_RESPONSE" | grep -q "Connexion r√©ussie"; then
        echo "   ‚úÖ Connexion r√©ussie pour $role"
    else
        echo "   ‚ùå √âchec de connexion pour $role"
        echo "   R√©ponse: $LOGIN_RESPONSE"
        return 1
    fi
    
    # Test de l'API documents
    DOCUMENTS_RESPONSE=$(curl -s -b $COOKIE_JAR "$APP_URL/api/documents")
    
    if echo "$DOCUMENTS_RESPONSE" | grep -q "documents"; then
        echo "   ‚úÖ API documents accessible"
        
        # Compter les documents retourn√©s
        DOCUMENT_COUNT=$(echo "$DOCUMENTS_RESPONSE" | jq '.documents | length' 2>/dev/null || echo "0")
        echo "   üìä Documents retourn√©s: $DOCUMENT_COUNT"
        
        # V√©rifier si le nombre correspond aux attentes
        if [ "$DOCUMENT_COUNT" -eq "$expected_count" ]; then
            echo "   ‚úÖ Nombre de documents correct ($expected_count)"
        else
            echo "   ‚ö†Ô∏è  Nombre de documents inattendu (attendu: $expected_count, obtenu: $DOCUMENT_COUNT)"
        fi
        
        # V√©rifier les statistiques
        STATS_TOTAL=$(echo "$DOCUMENTS_RESPONSE" | jq '.stats.total' 2>/dev/null || echo "0")
        echo "   üìà Statistiques total: $STATS_TOTAL"
        
        # V√©rifier les informations de debug (admin uniquement)
        if [ "$role" = "ADMIN" ]; then
            DEBUG_INFO=$(echo "$DOCUMENTS_RESPONSE" | jq '.debug' 2>/dev/null)
            if [ "$DEBUG_INFO" != "null" ]; then
                echo "   üîç Informations de debug pr√©sentes (admin)"
            else
                echo "   ‚ö†Ô∏è  Informations de debug manquantes pour admin"
            fi
        else
            DEBUG_INFO=$(echo "$DOCUMENTS_RESPONSE" | jq '.debug' 2>/dev/null)
            if [ "$DEBUG_INFO" = "null" ]; then
                echo "   ‚úÖ Pas d'informations de debug (non-admin)"
            else
                echo "   ‚ùå Informations de debug expos√©es (non-admin)"
            fi
        fi
        
    else
        echo "   ‚ùå API documents inaccessible"
        echo "   R√©ponse: $DOCUMENTS_RESPONSE"
        return 1
    fi
    
    echo ""
    return 0
}

# Fonction pour tester l'upload de document
test_document_upload() {
    local role="$1"
    local email="$2"
    local password="$3"
    local chantier_id="$4"
    local should_succeed="$5"
    
    echo "üì§ Test d'upload pour le r√¥le: $role"
    
    # Connexion
    LOGIN_RESPONSE=$(curl -s -X POST \
        -c $COOKIE_JAR \
        -b $COOKIE_JAR \
        -H "Content-Type: application/json" \
        -d "{\"email\": \"$email\", \"password\": \"$password\"}" \
        "$APP_URL/api/auth/login")
    
    if ! echo "$LOGIN_RESPONSE" | grep -q "Connexion r√©ussie"; then
        echo "   ‚ùå √âchec de connexion pour $role"
        return 1
    fi
    
    # Cr√©er un fichier de test
    echo "Test document for $role" > test_document.txt
    
    # Test d'upload
    UPLOAD_RESPONSE=$(curl -s -X POST \
        -b $COOKIE_JAR \
        -F "file=@test_document.txt" \
        -F "chantierId=$chantier_id" \
        -F "type=PDF" \
        "$APP_URL/api/documents")
    
    # Nettoyer le fichier de test
    rm -f test_document.txt
    
    if [ "$should_succeed" = "true" ]; then
        if echo "$UPLOAD_RESPONSE" | grep -q "nom"; then
            echo "   ‚úÖ Upload r√©ussi (attendu)"
        else
            echo "   ‚ùå Upload √©chou√© (inattendu)"
            echo "   R√©ponse: $UPLOAD_RESPONSE"
        fi
    else
        if echo "$UPLOAD_RESPONSE" | grep -q "Permissions insuffisantes"; then
            echo "   ‚úÖ Upload refus√© (attendu)"
        else
            echo "   ‚ùå Upload autoris√© (inattendu)"
            echo "   R√©ponse: $UPLOAD_RESPONSE"
        fi
    fi
    
    echo ""
}

echo "üöÄ D√©but des tests de s√©curit√©..."
echo ""

# Test 1: Admin (doit voir tous les documents)
test_documents_api "ADMIN" "admin@chantierpro.com" "password" "all"

# Test 2: Commercial (doit voir seulement ses clients)
test_documents_api "COMMERCIAL" "commercial1@chantierpro.com" "password" "filtered"

# Test 3: Client (doit voir seulement ses documents)
test_documents_api "CLIENT" "client1@chantierpro.com" "password" "filtered"

# Test 4: Ouvrier (doit voir seulement les chantiers assign√©s)
test_documents_api "OUVRIER" "ouvrier1@chantierpro.com" "password" "filtered"

echo "üì§ Tests d'upload de documents..."
echo ""

# Test d'upload avec diff√©rents r√¥les
# Note: Ces tests n√©cessitent des IDs de chantiers valides
# test_document_upload "ADMIN" "admin@chantierpro.com" "password" "chantier_id" "true"
# test_document_upload "CLIENT" "client1@chantierpro.com" "password" "chantier_id_autre_client" "false"

echo "üîç Test de filtrage par chantier..."
echo ""

# Test avec filtrage par chantier
CHANTIER_FILTER_RESPONSE=$(curl -s -b $COOKIE_JAR "$APP_URL/api/documents?chantierId=test_chantier_id")

if echo "$CHANTIER_FILTER_RESPONSE" | grep -q "documents"; then
    echo "   ‚úÖ Filtrage par chantier fonctionne"
else
    echo "   ‚ùå Filtrage par chantier √©choue"
fi

echo ""
echo "üìä R√âSULTATS DES TESTS:"
echo "======================"

# V√©rifications finales
echo "‚úÖ Tests de s√©curit√© des documents termin√©s"
echo ""
echo "üîí MESURES DE S√âCURIT√â IMPL√âMENT√âES:"
echo "- Filtrage par r√¥le (ADMIN, COMMERCIAL, CLIENT, OUVRIER)"
echo "- V√©rification des permissions sur les chantiers"
echo "- Statistiques filtr√©es selon les permissions"
echo "- Informations de debug limit√©es aux admins"
echo "- Validation des uploads par r√¥le"
echo ""
echo "‚ö†Ô∏è  RECOMMANDATIONS:"
echo "1. Tester avec des donn√©es r√©elles en production"
echo "2. V√©rifier les logs d'audit pour les acc√®s"
echo "3. Monitorer les tentatives d'acc√®s non autoris√©"
echo "4. Impl√©menter des alertes de s√©curit√©"
echo ""
echo "N'oubliez pas de supprimer le fichier $COOKIE_JAR apr√®s les tests."
