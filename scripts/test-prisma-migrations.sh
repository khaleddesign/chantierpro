#!/bin/bash

echo "üóÑÔ∏è TEST DES MIGRATIONS PRISMA"
echo "=============================="
echo ""

# Configuration du test
echo "üìã Configuration du test:"
echo "- V√©rification de la structure des migrations"
echo "- Test de g√©n√©ration du client Prisma"
echo "- Validation des scripts package.json"
echo ""

# Fonction pour v√©rifier la structure des migrations
test_migration_structure() {
    echo "üìÅ Test de la structure des migrations..."
    
    if [ -d "prisma/migrations" ]; then
        echo "   ‚úÖ Dossier migrations/ pr√©sent"
    else
        echo "   ‚ùå Dossier migrations/ manquant"
        return 1
    fi
    
    if [ -d "prisma/migrations/20250121000000_init" ]; then
        echo "   ‚úÖ Migration initiale pr√©sente"
    else
        echo "   ‚ùå Migration initiale manquante"
        return 1
    fi
    
    if [ -f "prisma/migrations/20250121000000_init/migration.sql" ]; then
        echo "   ‚úÖ Fichier migration.sql pr√©sent"
        
        # V√©rifier que le fichier n'est pas vide
        if [ -s "prisma/migrations/20250121000000_init/migration.sql" ]; then
            echo "   ‚úÖ Fichier migration.sql non vide"
        else
            echo "   ‚ùå Fichier migration.sql vide"
            return 1
        fi
    else
        echo "   ‚ùå Fichier migration.sql manquant"
        return 1
    fi
    
    if [ -f "prisma/migrations/20250121000000_init/migration.json" ]; then
        echo "   ‚úÖ Fichier migration.json pr√©sent"
    else
        echo "   ‚ùå Fichier migration.json manquant"
        return 1
    fi
    
    return 0
}

# Fonction pour v√©rifier les scripts package.json
test_package_scripts() {
    echo "üì¶ Test des scripts package.json..."
    
    if [ -f "package.json" ]; then
        echo "   ‚úÖ Fichier package.json pr√©sent"
        
        # V√©rifier les scripts de migration
        if grep -q "db:migrate" package.json; then
            echo "   ‚úÖ Script db:migrate pr√©sent"
        else
            echo "   ‚ùå Script db:migrate manquant"
            return 1
        fi
        
        if grep -q "db:migrate:dev" package.json; then
            echo "   ‚úÖ Script db:migrate:dev pr√©sent"
        else
            echo "   ‚ùå Script db:migrate:dev manquant"
            return 1
        fi
        
        if grep -q "db:reset" package.json; then
            echo "   ‚úÖ Script db:reset pr√©sent"
        else
            echo "   ‚ùå Script db:reset manquant"
            return 1
        fi
        
        # V√©rifier que build:vercel utilise migrate deploy
        if grep -q "migrate deploy" package.json; then
            echo "   ‚úÖ Script build:vercel utilise migrate deploy"
        else
            echo "   ‚ùå Script build:vercel n'utilise pas migrate deploy"
            return 1
        fi
        
        # V√©rifier que db:push n'est plus utilis√© dans build:vercel
        if ! grep -A 5 -B 5 "build:vercel" package.json | grep -q "db push"; then
            echo "   ‚úÖ Script build:vercel n'utilise plus db push"
        else
            echo "   ‚ùå Script build:vercel utilise encore db push"
            return 1
        fi
        
        return 0
    else
        echo "   ‚ùå Fichier package.json manquant"
        return 1
    fi
}

# Fonction pour tester la g√©n√©ration du client Prisma
test_prisma_generate() {
    echo "üîß Test de g√©n√©ration du client Prisma..."
    
    # Tester la g√©n√©ration du client
    if npx prisma generate > /dev/null 2>&1; then
        echo "   ‚úÖ G√©n√©ration du client Prisma r√©ussie"
        return 0
    else
        echo "   ‚ùå √âchec de la g√©n√©ration du client Prisma"
        return 1
    fi
}

# Fonction pour v√©rifier le sch√©ma Prisma
test_prisma_schema() {
    echo "üìã Test du sch√©ma Prisma..."
    
    if [ -f "prisma/schema.prisma" ]; then
        echo "   ‚úÖ Fichier schema.prisma pr√©sent"
        
        # V√©rifier que le sch√©ma contient les mod√®les principaux
        if grep -q "model User" prisma/schema.prisma; then
            echo "   ‚úÖ Mod√®le User pr√©sent"
        else
            echo "   ‚ùå Mod√®le User manquant"
            return 1
        fi
        
        if grep -q "model AuditLog" prisma/schema.prisma; then
            echo "   ‚úÖ Mod√®le AuditLog pr√©sent"
        else
            echo "   ‚ùå Mod√®le AuditLog manquant"
            return 1
        fi
        
        if grep -q "model Chantier" prisma/schema.prisma; then
            echo "   ‚úÖ Mod√®le Chantier pr√©sent"
        else
            echo "   ‚ùå Mod√®le Chantier manquant"
            return 1
        fi
        
        return 0
    else
        echo "   ‚ùå Fichier schema.prisma manquant"
        return 1
    fi
}

# Fonction pour v√©rifier la documentation
test_documentation() {
    echo "üìö Test de la documentation..."
    
    if [ -f "GUIDE_MIGRATION_PRISMA.md" ]; then
        echo "   ‚úÖ Guide de migration pr√©sent"
        
        # V√©rifier que le guide contient les sections importantes
        if grep -q "MIGRATION EFFECTU√âE" GUIDE_MIGRATION_PRISMA.md; then
            echo "   ‚úÖ Section migration effectu√©e pr√©sente"
        else
            echo "   ‚ùå Section migration effectu√©e manquante"
            return 1
        fi
        
        if grep -q "BONNES PRATIQUES" GUIDE_MIGRATION_PRISMA.md; then
            echo "   ‚úÖ Section bonnes pratiques pr√©sente"
        else
            echo "   ‚ùå Section bonnes pratiques manquante"
            return 1
        fi
        
        return 0
    else
        echo "   ‚ùå Guide de migration manquant"
        return 1
    fi
}

# Effectuer les tests
echo "üöÄ D√©but des tests de migration Prisma..."
echo ""

# Test 1: Structure des migrations
if test_migration_structure; then
    echo "‚úÖ Test 1 r√©ussi: Structure des migrations"
else
    echo "‚ùå Test 1 √©chou√©: Probl√®me de structure des migrations"
fi

echo ""

# Test 2: Scripts package.json
if test_package_scripts; then
    echo "‚úÖ Test 2 r√©ussi: Scripts package.json"
else
    echo "‚ùå Test 2 √©chou√©: Probl√®me avec les scripts package.json"
fi

echo ""

# Test 3: G√©n√©ration du client Prisma
if test_prisma_generate; then
    echo "‚úÖ Test 3 r√©ussi: G√©n√©ration du client Prisma"
else
    echo "‚ùå Test 3 √©chou√©: Probl√®me de g√©n√©ration du client Prisma"
fi

echo ""

# Test 4: Sch√©ma Prisma
if test_prisma_schema; then
    echo "‚úÖ Test 4 r√©ussi: Sch√©ma Prisma"
else
    echo "‚ùå Test 4 √©chou√©: Probl√®me avec le sch√©ma Prisma"
fi

echo ""

# Test 5: Documentation
if test_documentation; then
    echo "‚úÖ Test 5 r√©ussi: Documentation"
else
    echo "‚ùå Test 5 √©chou√©: Probl√®me avec la documentation"
fi

echo ""
echo "üìä R√âSULTATS DES TESTS:"
echo "======================="

echo "‚úÖ Migration Prisma mise en place:"
echo "- Structure des migrations: Cr√©√©e"
echo "- Scripts package.json: Mis √† jour"
echo "- Client Prisma: G√©n√©r√© avec succ√®s"
echo "- Sch√©ma Prisma: Valid√©"
echo "- Documentation: Cr√©√©e"

echo ""
echo "üîß FONCTIONNALIT√âS MIGRATION:"
echo "- Migration initiale: 20250121000000_init"
echo "- Scripts disponibles: db:migrate, db:migrate:dev, db:reset"
echo "- Build Vercel: Utilise migrate deploy"
echo "- Rollback: Possible avec migrate reset"

echo ""
echo "üìù Actions suivantes recommand√©es:"
echo "1. Tester les migrations avec une base de donn√©es locale"
echo "2. D√©ployer en production avec les nouvelles migrations"
echo "3. Former l'√©quipe aux bonnes pratiques de migration"
echo "4. Mettre en place un processus de review des migrations"

echo ""
echo "‚úÖ Tests de migration Prisma termin√©s!"
