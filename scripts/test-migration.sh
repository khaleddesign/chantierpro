#!/bin/bash

# Script de test automatis√© pour la migration des routes API
# Usage: ./scripts/test-migration.sh [route-name]

echo "üß™ D√©marrage des tests de migration pour les routes API..."
echo "=========================================================="

# Configuration
BASE_URL="http://localhost:3000"
TEST_USER_EMAIL="admin@chantierpro.com"
TEST_USER_PASSWORD="Password123!"

# Fonction pour tester une route migr√©e
test_migrated_route() {
    local route_name=$1
    local endpoint="/api/$route_name"
    
    echo "üîç Test de la route $endpoint..."
    
    # Test 1: Authentification requise
    echo "  Test 1: V√©rification de l'authentification..."
    local auth_response=$(curl -s -w "%{http_code}" -o /dev/null "$BASE_URL$endpoint")
    if [ "$auth_response" = "401" ]; then
        echo "    ‚úÖ Authentification requise (401)"
    else
        echo "    ‚ùå Authentification manquante ($auth_response)"
        return 1
    fi
    
    # Test 2: Rate limiting
    echo "  Test 2: V√©rification du rate limiting..."
    local rate_limit_response=$(curl -s -w "%{http_code}" -o /dev/null "$BASE_URL$endpoint")
    if [ "$rate_limit_response" = "401" ] || [ "$rate_limit_response" = "429" ]; then
        echo "    ‚úÖ Rate limiting fonctionnel"
    else
        echo "    ‚ö†Ô∏è  Rate limiting non d√©tect√© ($rate_limit_response)"
    fi
    
    # Test 3: Validation des param√®tres
    echo "  Test 3: Validation des param√®tres..."
    local validation_response=$(curl -s -w "%{http_code}" -o /dev/null "$BASE_URL$endpoint?page=invalid&limit=999")
    if [ "$validation_response" = "400" ] || [ "$validation_response" = "401" ]; then
        echo "    ‚úÖ Validation des param√®tres fonctionnelle"
    else
        echo "    ‚ö†Ô∏è  Validation des param√®tres non d√©tect√©e ($validation_response)"
    fi
    
    echo "  ‚úÖ Tests de base termin√©s pour $endpoint"
}

# Fonction pour tester la compatibilit√© des sch√©mas
test_schema_compatibility() {
    local route_name=$1
    
    echo "üìã Test de compatibilit√© des sch√©mas pour $route_name..."
    
    # V√©rifier que les sch√©mas existent dans lib/validations.ts
    if grep -q "${route_name}QuerySchema\|${route_name}CreateSchema" "lib/validations.ts"; then
        echo "    ‚úÖ Sch√©mas Zod trouv√©s dans lib/validations.ts"
    else
        echo "    ‚ùå Sch√©mas Zod manquants pour $route_name"
        return 1
    fi
    
    # V√©rifier la structure de la base de donn√©es
    if grep -q "model ${route_name^}" "prisma/schema.prisma"; then
        echo "    ‚úÖ Mod√®le Prisma trouv√© pour $route_name"
    else
        echo "    ‚ùå Mod√®le Prisma manquant pour $route_name"
        return 1
    fi
    
    echo "    ‚úÖ Compatibilit√© des sch√©mas valid√©e"
}

# Fonction pour tester la migration compl√®te
test_complete_migration() {
    local route_name=$1
    local route_file="app/api/$route_name/route.ts"
    
    echo "üîÑ Test de migration compl√®te pour $route_name..."
    
    # V√©rifier que la route utilise le template standardis√©
    if grep -q "withErrorHandling\|requireAuth\|createPaginatedResponse" "$route_file"; then
        echo "    ‚úÖ Template standardis√© appliqu√©"
    else
        echo "    ‚ùå Template standardis√© non appliqu√©"
        return 1
    fi
    
    # V√©rifier que les anciens patterns sont supprim√©s
    if grep -q "getServerSession.*authOptions" "$route_file"; then
        echo "    ‚ö†Ô∏è  Ancien pattern getServerSession encore pr√©sent"
    else
        echo "    ‚úÖ Ancien pattern getServerSession supprim√©"
    fi
    
    # V√©rifier la gestion d'erreurs
    if grep -q "try.*catch" "$route_file"; then
        echo "    ‚ö†Ô∏è  Gestion d'erreurs manuelle encore pr√©sente"
    else
        echo "    ‚úÖ Gestion d'erreurs centralis√©e appliqu√©e"
    fi
    
    echo "    ‚úÖ Migration compl√®te valid√©e"
}

# Fonction pour tester les performances
test_performance() {
    local route_name=$1
    local endpoint="/api/$route_name"
    
    echo "‚ö° Test de performance pour $endpoint..."
    
    # Test de temps de r√©ponse
    local start_time=$(date +%s%N)
    curl -s "$BASE_URL$endpoint" > /dev/null
    local end_time=$(date +%s%N)
    local response_time=$(( (end_time - start_time) / 1000000 ))
    
    if [ $response_time -lt 1000 ]; then
        echo "    ‚úÖ Temps de r√©ponse acceptable (${response_time}ms)"
    else
        echo "    ‚ö†Ô∏è  Temps de r√©ponse √©lev√© (${response_time}ms)"
    fi
}

# Fonction principale
main() {
    local route_name=$1
    
    if [ -z "$route_name" ]; then
        echo "üìã Routes disponibles pour test:"
        echo "   1. chantiers"
        echo "   2. documents"
        echo "   3. devis"
        echo "   4. users (d√©j√† migr√©e)"
        echo ""
        echo "Usage: $0 [route-name]"
        echo "Exemple: $0 chantiers"
        exit 1
    fi
    
    echo "üéØ Test de migration pour: $route_name"
    echo ""
    
    # Tests de base
    test_schema_compatibility "$route_name"
    echo ""
    
    test_complete_migration "$route_name"
    echo ""
    
    # Tests fonctionnels (si l'application tourne)
    if curl -s "$BASE_URL/api/health" > /dev/null 2>&1; then
        test_migrated_route "$route_name"
        echo ""
        test_performance "$route_name"
    else
        echo "‚ö†Ô∏è  Application non d√©marr√©e - tests fonctionnels ignor√©s"
        echo "   D√©marrez l'application avec: npm run dev"
    fi
    
    echo ""
    echo "üéâ Tests de migration termin√©s pour $route_name"
}

# Ex√©cution
main "$@"
