#!/bin/bash

# Script de migration automatis√© pour les routes API critiques
# Usage: ./scripts/migrate-api-routes.sh [route-name]

echo "üöÄ D√©marrage de la migration automatis√©e des routes API..."
echo "=========================================================="

# Configuration
ROUTES_DIR="app/api"
BACKUP_DIR="backups/api-routes"
TEMPLATE_FILE="templates/api-route-template.ts"

# Fonction pour cr√©er un backup
create_backup() {
    local route_file=$1
    local backup_file="${BACKUP_DIR}/$(basename $route_file).backup.$(date +%Y%m%d_%H%M%S)"
    
    mkdir -p "$BACKUP_DIR"
    cp "$route_file" "$backup_file"
    echo "‚úÖ Backup cr√©√©: $backup_file"
}

# Fonction pour migrer une route sp√©cifique
migrate_route() {
    local route_name=$1
    local route_file="${ROUTES_DIR}/${route_name}/route.ts"
    
    if [ ! -f "$route_file" ]; then
        echo "‚ùå Route non trouv√©e: $route_file"
        return 1
    fi
    
    echo "üîÑ Migration de $route_name..."
    
    # Cr√©er un backup
    create_backup "$route_file"
    
    # Analyser la route existante
    echo "üìä Analyse de la route existante..."
    
    # V√©rifier les d√©pendances sp√©cialis√©es
    if grep -q "checkPermission\|logSecurityEvent\|GDPRDataController\|cache\.get" "$route_file"; then
        echo "‚ö†Ô∏è  Route avec d√©pendances sp√©cialis√©es d√©tect√©e"
        echo "   Migration manuelle requise pour les fonctions sp√©cialis√©es"
        return 2
    fi
    
    # V√©rifier les sch√©mas Zod existants
    if grep -q "Schema.*=.*z\.object" "$route_file"; then
        echo "‚úÖ Sch√©mas Zod existants d√©tect√©s"
    else
        echo "‚ö†Ô∏è  Aucun sch√©ma Zod d√©tect√© - cr√©ation requise"
    fi
    
    # G√©n√©rer le template de migration
    generate_migration_template "$route_name" "$route_file"
    
    echo "‚úÖ Migration de $route_name termin√©e"
}

# Fonction pour g√©n√©rer le template de migration
generate_migration_template() {
    local route_name=$1
    local route_file=$2
    
    echo "üìù G√©n√©ration du template de migration pour $route_name..."
    
    # Extraire les m√©thodes HTTP utilis√©es
    local methods=$(grep -o "export async function [A-Z]*" "$route_file" | sed 's/export async function //' | tr '\n' ' ')
    
    echo "   M√©thodes d√©tect√©es: $methods"
    
    # Cr√©er le fichier de migration
    local migration_file="${BACKUP_DIR}/${route_name}_migration_plan.md"
    
    cat > "$migration_file" << 'EOF'
# Plan de Migration pour ROUTE_NAME

## Route: ROUTE_FILE

### M√©thodes HTTP d√©tect√©es
METHODS

### D√©pendances sp√©cialis√©es
DEPENDENCIES

### Sch√©mas Zod existants
SCHEMAS

### Actions requises
1. ‚úÖ Backup cr√©√©
2. üîÑ Appliquer le template standardis√©
3. üîß Adapter les d√©pendances sp√©cialis√©es (si n√©cessaire)
4. üìã Cr√©er les sch√©mas Zod manquants
5. üß™ Tester la route migr√©e
6. üöÄ D√©ployer

### Template √† appliquer
```typescript
// Force Node.js runtime pour les op√©rations de base de donn√©es
export const runtime = 'nodejs'
export const dynamic = 'force-dynamic'

import { NextRequest } from "next/server";
import { 
  withErrorHandling, 
  requireAuth, 
  createSuccessResponse,
  createPaginatedResponse,
  logUserAction,
  checkRateLimit,
  APIError
} from '@/lib/api-helpers';
import { validateAndSanitize } from '@/lib/validations/crm';
import { ROUTE_NAME_QuerySchema, ROUTE_NAME_CreateSchema } from '@/lib/validations';
import { z } from 'zod';
import { prisma } from '@/lib/prisma';

// GET /api/ROUTE_NAME - R√©cup√©rer la liste
export const GET = withErrorHandling(async (request: NextRequest) => {
  const session = await requireAuth(['ADMIN', 'COMMERCIAL']);
  
  if (!checkRateLimit(`ROUTE_NAME:${session.user.id}`, 200, 15 * 60 * 1000)) {
    throw new APIError('Trop de requ√™tes, veuillez r√©essayer plus tard', 429);
  }

  const { searchParams } = new URL(request.url);
  
  const paramsValidation = validateAndSanitize(ROUTE_NAME_QuerySchema, {
    page: searchParams.get('page') || '1',
    limit: searchParams.get('limit') || '20',
    search: searchParams.get('search') || undefined
  });

  if (!paramsValidation.success) {
    throw new APIError(`Param√®tres invalides: ${paramsValidation.errors?.join(', ')}`, 400);
  }

  const { page, limit, search } = paramsValidation.data!;
  const skip = (page - 1) * limit;

  // Logique m√©tier sp√©cifique √† ROUTE_NAME
  const whereClause: any = {};
  if (search) {
    whereClause.OR = [
      { nom: { contains: search, mode: "insensitive" } },
      { description: { contains: search, mode: "insensitive" } }
    ];
  }

  const [data, total] = await Promise.all([
    prisma.ROUTE_NAME.findMany({
      where: whereClause,
      skip,
      take: limit,
      orderBy: { createdAt: "desc" }
    }),
    prisma.ROUTE_NAME.count({ where: whereClause })
  ]);

  await logUserAction(
    session.user.id, 
    'GET_ROUTE_NAME', 
    'ROUTE_NAME', 
    undefined, 
    { search, page, limit },
    request
  );

  return createPaginatedResponse(data, total, page, limit, 'ROUTE_NAME r√©cup√©r√©s avec succ√®s');
});

// POST /api/ROUTE_NAME - Cr√©er un nouvel √©l√©ment
export const POST = withErrorHandling(async (request: NextRequest) => {
  const session = await requireAuth(['ADMIN', 'COMMERCIAL']);
  
  if (!checkRateLimit(`ROUTE_NAME:${session.user.id}`, 10, 15 * 60 * 1000)) {
    throw new APIError('Trop de cr√©ations, veuillez r√©essayer plus tard', 429);
  }

  const body = await request.json();
  
  const validation = validateAndSanitize(ROUTE_NAME_CreateSchema, body);
  if (!validation.success) {
    throw new APIError(`Donn√©es invalides: ${validation.errors?.join(', ')}`, 400);
  }

  const data = validation.data!;

  const newItem = await prisma.ROUTE_NAME.create({
    data: data
  });

  await logUserAction(
    session.user.id, 
    'CREATE_ROUTE_NAME', 
    'ROUTE_NAME', 
    newItem.id, 
    { nom: newItem.nom },
    request
  );

  return createSuccessResponse(newItem, 'ROUTE_NAME cr√©√© avec succ√®s', 201);
});
```
EOF

    # Remplacer les placeholders
    sed -i "s/ROUTE_NAME/$route_name/g" "$migration_file"
    sed -i "s/ROUTE_FILE/$route_file/g" "$migration_file"
    sed -i "s/METHODS/$methods/g" "$migration_file"
    
    # Ajouter les d√©pendances sp√©cialis√©es
    local dependencies=$(grep -n "import.*security\|import.*gdpr\|import.*cache" "$route_file" || echo "Aucune d√©pendance sp√©cialis√©e")
    sed -i "s/DEPENDENCIES/$dependencies/g" "$migration_file"
    
    # Ajouter les sch√©mas Zod existants
    local schemas=$(grep -n "Schema.*=.*z\.object" "$route_file" || echo "Aucun sch√©ma Zod existant")
    sed -i "s/SCHEMAS/$schemas/g" "$migration_file"

    echo "üìã Plan de migration cr√©√©: $migration_file"
}

# Fonction principale
main() {
    local route_name=$1
    
    if [ -z "$route_name" ]; then
        echo "üìã Routes disponibles pour migration:"
        echo "   1. chantiers"
        echo "   2. documents" 
        echo "   3. devis"
        echo "   4. admin/security"
        echo "   5. admin/gdpr"
        echo ""
        echo "Usage: $0 [route-name]"
        echo "Exemple: $0 chantiers"
        exit 1
    fi
    
    migrate_route "$route_name"
    
    echo ""
    echo "üéâ Migration termin√©e pour $route_name"
    echo "üìã Consultez le plan de migration dans: ${BACKUP_DIR}/${route_name}_migration_plan.md"
}

# Ex√©cution
main "$@"
