const fetch = require('node-fetch');

async function testAPIsWithDirectAuth() {
  console.log('üîç TEST DES APIS AVEC AUTHENTIFICATION DIRECTE');
  console.log('==============================================');

  // Test 1: API Health (sans auth)
  console.log('\n1Ô∏è‚É£ TEST API HEALTH...');
  try {
    const healthResponse = await fetch('http://localhost:3000/api/health');
    const healthData = await healthResponse.json();
    console.log('‚úÖ Health API:', healthData.status);
  } catch (error) {
    console.log('‚ùå Health API error:', error.message);
  }

  // Test 2: Test de connexion directe √† la base
  console.log('\n2Ô∏è‚É£ TEST CONNEXION BASE DIRECTE...');
  try {
    const { PrismaClient } = require('@prisma/client');
    const prisma = new PrismaClient();
    
    const userCount = await prisma.user.count();
    console.log('‚úÖ Utilisateurs en base:', userCount);
    
    const admin = await prisma.user.findUnique({
      where: { email: 'admin@chantierpro.fr' },
      select: { id: true, email: true, role: true }
    });
    
    if (admin) {
      console.log('‚úÖ Admin trouv√©:', admin.email, 'Role:', admin.role);
    } else {
      console.log('‚ùå Admin non trouv√©');
    }
    
    await prisma.$disconnect();
  } catch (error) {
    console.log('‚ùå Erreur connexion base:', error.message);
  }

  // Test 3: Test cr√©ation utilisateur directe
  console.log('\n3Ô∏è‚É£ TEST CR√âATION UTILISATEUR DIRECTE...');
  try {
    const { PrismaClient } = require('@prisma/client');
    const bcrypt = require('bcryptjs');
    const prisma = new PrismaClient();
    
    // R√©cup√©rer l'admin pour l'ID commercial
    const admin = await prisma.user.findUnique({
      where: { email: 'admin@chantierpro.fr' },
      select: { id: true }
    });
    
    const testEmail = `test-${Date.now()}@example.com`;
    const hashedPassword = await bcrypt.hash('test123', 10);
    
    const newUser = await prisma.user.create({
      data: {
        name: 'Test User',
        email: testEmail,
        password: hashedPassword,
        role: 'CLIENT',
        commercialId: admin.id
      }
    });
    
    console.log('‚úÖ Utilisateur cr√©√©:', newUser.email, 'ID:', newUser.id);
    
    // Nettoyer
    await prisma.user.delete({ where: { id: newUser.id } });
    console.log('‚úÖ Utilisateur supprim√©');
    
    await prisma.$disconnect();
  } catch (error) {
    console.log('‚ùå Erreur cr√©ation utilisateur:', error.message);
  }

  console.log('\nüéØ TESTS TERMIN√âS');
}

testAPIsWithDirectAuth().catch(console.error);
