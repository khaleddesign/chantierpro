#!/usr/bin/env node

const { execSync } = require('child_process');
const chalk = require('chalk');
const fs = require('fs');

console.log(chalk.blue.bold('\nüîç V√âRIFICATION SANT√â CHANTIERPRO'));
console.log('='.repeat(50));

let allPassed = true;
const results = {
  build: false,
  tests: false,
  security: false,
  types: false,
  lint: false
};

// Configuration des seuils
const config = {
  maxTestFailures: 5, // Nombre acceptable de tests √©chou√©s
  maxSecurityVulnerabilities: 3, // Nombre acceptable de vuln√©rabilit√©s LOW
  maxLintWarnings: 50 // Nombre acceptable de warnings ESLint
};

function runCommand(command, description) {
  try {
    console.log(chalk.yellow(`‚è≥ ${description}...`));
    const output = execSync(command, { 
      encoding: 'utf8', 
      stdio: 'pipe',
      timeout: 120000 // 2 minutes timeout
    });
    return { success: true, output };
  } catch (error) {
    return { success: false, output: error.stdout || error.message };
  }
}

// 1. V√âRIFICATION BUILD
console.log(chalk.cyan('\nüì¶ 1. V√âRIFICATION BUILD'));
const buildResult = runCommand('npm run build', 'Construction du projet');

if (buildResult.success) {
  console.log(chalk.green('‚úÖ Build r√©ussi'));
  results.build = true;
} else {
  console.log(chalk.red('‚ùå Build √©chou√©'));
  console.log(chalk.gray(buildResult.output.slice(-500))); // Derni√®res 500 chars
  allPassed = false;
}

// 2. V√âRIFICATION TESTS
console.log(chalk.cyan('\nüß™ 2. V√âRIFICATION TESTS'));
const testResult = runCommand('npm test -- --passWithNoTests', 'Ex√©cution des tests');

if (testResult.success) {
  console.log(chalk.green('‚úÖ Tests pass√©s'));
  results.tests = true;
} else {
  // Analyser le r√©sultat des tests
  const testOutput = testResult.output;
  const failedMatch = testOutput.match(/Tests:\s+(\d+)\s+failed,\s+(\d+)\s+passed/);
  
  if (failedMatch) {
    const failed = parseInt(failedMatch[1]);
    const passed = parseInt(failedMatch[2]);
    
    if (failed <= config.maxTestFailures) {
      console.log(chalk.yellow(`‚ö†Ô∏è  ${failed} tests √©chou√©s (acceptable: ${config.maxTestFailures})`));
      console.log(chalk.green(`‚úÖ ${passed} tests pass√©s`));
      results.tests = true;
    } else {
      console.log(chalk.red(`‚ùå Trop de tests √©chou√©s: ${failed} (max: ${config.maxTestFailures})`));
      allPassed = false;
    }
  } else {
    console.log(chalk.red('‚ùå Tests √©chou√©s'));
    allPassed = false;
  }
}

// 3. V√âRIFICATION S√âCURIT√â
console.log(chalk.cyan('\nüîí 3. V√âRIFICATION S√âCURIT√â'));
const auditResult = runCommand('npm audit --audit-level=moderate', 'Audit de s√©curit√©');

if (auditResult.success) {
  console.log(chalk.green('‚úÖ Aucune vuln√©rabilit√© critique'));
  results.security = true;
} else {
  // Analyser les vuln√©rabilit√©s
  const auditOutput = auditResult.output;
  const lowVulnMatch = auditOutput.match(/(\d+)\s+low\s+severity\s+vulnerabilities/);
  
  if (lowVulnMatch) {
    const lowVuln = parseInt(lowVulnMatch[1]);
    if (lowVuln <= config.maxSecurityVulnerabilities) {
      console.log(chalk.yellow(`‚ö†Ô∏è  ${lowVuln} vuln√©rabilit√©s LOW (acceptable: ${config.maxSecurityVulnerabilities})`));
      results.security = true;
    } else {
      console.log(chalk.red(`‚ùå Trop de vuln√©rabilit√©s: ${lowVuln} (max: ${config.maxSecurityVulnerabilities})`));
      allPassed = false;
    }
  } else if (auditOutput.includes('found 0 vulnerabilities')) {
    console.log(chalk.green('‚úÖ Aucune vuln√©rabilit√© trouv√©e'));
    results.security = true;
  } else {
    console.log(chalk.red('‚ùå Vuln√©rabilit√©s critiques d√©tect√©es'));
    allPassed = false;
  }
}

// 4. V√âRIFICATION TYPES 'ANY'
console.log(chalk.cyan('\nüìù 4. V√âRIFICATION TYPES ANY'));
try {
  const anyCount = execSync('find . -name "*.ts" -o -name "*.tsx" | grep -v node_modules | xargs grep -o ": any" | wc -l', { encoding: 'utf8' }).trim();
  console.log(chalk.blue(`üìä Types 'any' trouv√©s: ${anyCount}`));
  
  if (parseInt(anyCount) < 100) {
    console.log(chalk.green('‚úÖ Nombre de types any acceptable'));
    results.types = true;
  } else {
    console.log(chalk.yellow('‚ö†Ô∏è  Beaucoup de types any d√©tect√©s'));
    results.types = true; // Non bloquant
  }
} catch (error) {
  console.log(chalk.gray('‚ÑπÔ∏è  Impossible de compter les types any'));
  results.types = true; // Non bloquant
}

// 5. V√âRIFICATION LINT (optionnelle)
console.log(chalk.cyan('\nüé® 5. V√âRIFICATION LINT'));
const lintResult = runCommand('npm run lint', 'V√©rification du style de code');

if (lintResult.success) {
  console.log(chalk.green('‚úÖ Code conforme aux r√®gles'));
  results.lint = true;
} else {
  // Compter les warnings
  const warnings = (lintResult.output.match(/Warning:/g) || []).length;
  if (warnings <= config.maxLintWarnings) {
    console.log(chalk.yellow(`‚ö†Ô∏è  ${warnings} warnings ESLint (acceptable: ${config.maxLintWarnings})`));
    results.lint = true;
  } else {
    console.log(chalk.red(`‚ùå Trop de warnings: ${warnings} (max: ${config.maxLintWarnings})`));
    // Non bloquant pour le moment
    results.lint = true;
  }
}

// RAPPORT FINAL
console.log(chalk.blue.bold('\nüìä RAPPORT FINAL'));
console.log('='.repeat(30));

const statusIcon = (status) => status ? '‚úÖ' : '‚ùå';
console.log(`${statusIcon(results.build)} Build`);
console.log(`${statusIcon(results.tests)} Tests`);
console.log(`${statusIcon(results.security)} S√©curit√©`);
console.log(`${statusIcon(results.types)} Types`);
console.log(`${statusIcon(results.lint)} Lint`);

if (allPassed) {
  console.log(chalk.green.bold('\nüéâ PROJET SAIN ET STABLE'));
  console.log(chalk.green('Pr√™t pour le d√©veloppement business !'));
} else {
  console.log(chalk.red.bold('\n‚ö†Ô∏è  ATTENTION REQUISE'));
  console.log(chalk.yellow('Corrigez les probl√®mes critiques avant de continuer.'));
}

// COMMANDES DE CORRECTION SUGG√âR√âES
if (!results.security) {
  console.log(chalk.yellow('\nüí° Pour corriger la s√©curit√©:'));
  console.log(chalk.gray('npm audit fix --force'));
}

if (!results.build || !results.tests) {
  console.log(chalk.yellow('\nüí° Pour d√©boguer:'));
  console.log(chalk.gray('npm run build && npm test'));
}

// Sauvegarder le rapport
const reportData = {
  timestamp: new Date().toISOString(),
  status: allPassed ? 'HEALTHY' : 'NEEDS_ATTENTION',
  results: results,
  recommendations: []
};

if (!allPassed) {
  reportData.recommendations.push('Corriger les probl√®mes critiques identifi√©s');
}

fs.writeFileSync('health-report.json', JSON.stringify(reportData, null, 2));
console.log(chalk.gray('\nüìÑ Rapport sauvegard√© dans health-report.json'));

process.exit(allPassed ? 0 : 1);